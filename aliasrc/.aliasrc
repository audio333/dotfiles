####################
##### SYSTEM #######
####################

#-------- Set Default Programs {{{
#------------------------------------------------------
# DESC: check and choose the first program in the array that is installed as the default

# find alternative apps if it is installed on your system
find_alt() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }

# set the default program
# the first program in the array that is detected on your system will be chosen as the default
export OPENER=$(find_alt xdg-open exo-open gnome-open )
export BROWSER=$(find_alt chromium chromium-browser qutebrowser google-chrome firefox $OPENER )
# export BROWSER=$(find_alt qutebrowser chromium chromium-browser google-chrome firefox $OPENER )
#export BROWSERCLI=$(find_alt w3m links2 links lynx elinks $OPENER )
#export BROWSERTOR=$(find_alt tor-browser-en)
#export COMICER=$(find_alt mcomix comix zathura $OPENER )
#export EBOOKER=$(find_alt ebook-viewer $OPENER )
export EDITOR=$(find_alt vim vi emacs nano leafpad gedit pluma $OPENER )
export EDITORGUI=$(find_alt subl code gedit $OPENER )
export WORDPROCESSOR=$(find_alt wordgrinder $OPENER )
export FILEMANAGER=$(find_alt pcmanfm thunar nautilus dolphin spacefm enlightenment_filemanager $OPENER )
export FILEMANAGERCLI=$(find_alt ranger vifm mc $OPENER )
export MUSICER=$(find_alt mpv mplayer mpg123 cvlc $OPENER )
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mpv mplayer ffplay cvlc $OPENER )
export READER=$(find_alt mupdf zathura evince $OPENER )
export ROOTER=$(find_alt gksudo kdesudo )
export IMAGEVIEWER=$(find_alt sxiv feh ristretto display eog $OPENER )
export QUEUER=$(find_alt tsp fq ts )
export TERMER=$(find_alt terminator urxvt xterm uxterm termite sakura lxterminal mate-terminal pantheon-terminal konsole gnome-terminal xfce4-terminal $OPENER )

# }}}
#-------- Configurations {{{
#------------------------------------------------------
cfg-aliasrc() { $EDITOR ~/.aliasrc ;}
#cfg-abookrc() { $EDITOR ~/.abook/abookrc ;}
#cfg-addressbook() { $EDITOR ~/.abook/addressbook ;}
cfg-autostartrc() { $EDITOR ~/.autostartrc ;}
cfg-bashrc() { $EDITOR ~/.bashrc ;}
#cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh ;}
#cfg-cava() { $EDITOR ~/.config/cava/config ;}
#cfg-clonezilla() { sudo $EDITOR /etc/drbl/drbl.conf ;}
# https://wiki.archlinux.org/index.php/Cursor_Themes#Choosing_and_Configuring_Cursor_Themes
#cfg-cursor() { $EDITOR ~/.icons/default/index.theme ;}
#cfg-cursor-list() { ls ~/.icons ;}
#cfg-emacs() { $EDITOR ~/.emacs ;}
#cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg ;}
#cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg ;}
#cfg-flexget() { $EDITOR ~/.flexget/config.yml ;}
cfg-fstab() { sudo $EDITOR /etc/fstab ;}
cfg-gitignore() { $EDITOR ~/Public/dotfiles/.gitignore ;}
#cfg-greenclip() { killall greenclip ; $EDITOR ~/.config/greenclip.cfg && nohup greenclip daemon > /dev/null 2>&1 & }
#cfg-group() { sudo $EDITOR /etc/group ;}
#cfg-grub() { sudo $EDITOR /etc/default/grub ;}
#cfg-hintrc() { $EDITOR ~/.hintrc ;}
cfg-hosts() { sudo $EDITOR /etc/hosts ;}
#cfg-hyperterminal() { $EDITOR ~/.hyper.js ;}
cfg-i3wm() { $EDITOR ~/.config/i3/config ;}
#cfg-inputrc() { $EDITOR ~/.inputrc ;}
#cfg-internetarchive() { $EDITOR ~/.config/ia.ini ;} # archive.org downloader https://internetarchive.readthedocs.io/en/latest/
#cfg-keynavrc() { $EDITOR ~/.keynavrc ;}
#cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml ;}
#cfg-kodi-confluencethumbnailview() { sudo $EDITOR /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml ;}
#cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg ;}
#cfg-livestreamer() { $EDITOR ~/.livestreamerrc ;}
#cfg-mailcap() { $EDITOR ~/.mailcap ;}
#cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc ;}
#cfg-mc() { $EDITOR ~/.config/mc/ini ;}
#cfg-mc-keymap() { $EDITOR ~/.config/mc/mc.keymap ;}
#cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf ;}
#cfg-megarc() { $EDITOR ~/.megarc ;}
#cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
cfg-mpv() { $EDITOR ~/.config/mpv/mpv.conf ;}
cfg-mpv-input() { $EDITOR ~/.config/mpv/input.conf ;}
#cfg-mocp() { $EDITOR ~/.moc/config ;}
#cfg-muttrc() { $EDITOR ~/.muttrc ;}
cfg-nanorc() { $EDITOR ~/.nanorc;}
#cfg-nap() { $EDITOR ~/.nap/napconf ;}
#cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
#cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
#cfg-netrc() { $EDITOR ~/.netrc;}
#cfg-newsbeuter() { $EDITOR ~/.newsbeuter/config ;}
#cfg-newsbeuter-queue() { $EDITOR ~/.newsbeuter/queue ;}
#cfg-newsbeuter-urls() { $EDITOR ~/.newsbeuter/urls ;}
cfg-newsboat() { $EDITOR ~/.newsboat/config ;}
cfg-newsboat-queue() { $EDITOR ~/.newsboat/queue ;}
cfg-newsboat-urls() { $EDITOR ~/.newsboat/urls ;}
cfg-nvim() { $EDITOR ~/.config/nvim/init.vim ;}
#cfg-pastebinit() { $EDITOR ~/.pastebinit.xml ;}
#cfg-pianobar() { $EDITOR ~/.config/pianobar/config ;}
#cfg-pianobar-libao() { sudo $EDITOR /etc/libao.conf ;}
#cfg-profile() { $EDITOR ~/.profile ;}
#cfg-pulseaudio() { sudo $EDITOR /etc/pulse/default.pa ;}
#cfg-pyload() { $EDITOR ~/.pyload/pyload.conf ;}
#cfg-pyradio() { $EDITOR ~/.pyradio/stations.csv ;}
#cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
#cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
#cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
#cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg ;}
#cfg-rofibangs() { $EDITOR ~/.scripts/rofi-scripts-collection/rofi-bangs.sh ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
#cfg-retroarch() { $EDITOR ~/.config/retroarch/retroarch.cfg ;}
#cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg ;}
#cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
#cfg-skippyxd() { $EDITOR ~/.skippy-xd.rc ;}
#cfg-slrnrc() { $EDITOR ~/.slrnrc ;}
#cfg-ssh-client() { sudo $EDITOR /etc/ssh/ssh_config ;}
#cfg-ssh-daemon() { sudo $EDITOR /etc/ssh/sshd_config ;}
#cfg-sudoers() { sudo $EDITOR /etc/sudoers ;}
#cfg-bookmarks() { $EDITOR ~/.config/surfraw/bookmarks ;}
#cfg-sakura() { $EDITOR ~/.config/sakura/sakura.conf ;}
#cfg-surfraw() { $EDITOR ~/.config/surfraw/conf ;}
#cfg-syncthing() { $EDITOR ~/.config/syncthing/config.xml ;}
cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
#cfg-tor() { sudo $EDITOR /etc/tor/torrc ;}
#cfg-tor-user() { $EDITOR ~/.torrc ;}
cfg-torrentflix() { torrentflix --config=$EDITOR ;}
#cfg-torrench() { $EDITOR ~/.config/torrench/config.ini ;}
#cfg-tpb() { $EDITOR ~/.scripts/tpb.sh ;}
#cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json ;}
#cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg ;}
#cfg-trz() { $EDITOR ~/.scripts/trz.sh ;}
#cfg-turses() { $EDITOR ~/.turses/config ;}
#cfg-urlview() { $EDITOR ~/.urlview ;}
cfg-updatedb() { sudo $EDITOR /etc/updatedb.conf ;}
#cfg-vifmrc() { $EDITOR ~/.config/vifm/vifmrc ;}
cfg-vimrc() { $EDITOR ~/.vimrc ;}
#cfg-w3m() { $EDITOR ~/.w3m/config ;}
#cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap ;}
#cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap ;}
#cfg-wegorc() { $EDITOR ~/.wegorc ;}
cfg-xbindkeysrc() { $EDITOR ~/.xbindkeysrc && killall xbindkeys ; xbindkeys ;}
#cfg-xboxdrv() { sudo $EDITOR /etc/default/xboxdrv ;}
cfg-xmodmap() { $EDITOR ~/.Xmodmap ;}
cfg-xresources() { $EDITOR ~/.Xresources ;}
#cfg-yaourtrc() { $EDITOR ~/.yaourtrc ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}
#cfg-zurlrc() { $EDITOR ~/.zurlrc ;}
#}}}
#-------- Configurations Reload {{{
#------------------------------------------------------
rld-bashrc() { source ~/.bashrc ;}
rld-font() { fc-cache -v -f ;}
#rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
#rld-greenclip() { killall greenclip ; nohup greenclip daemon > /dev/null 2>&1 & }
#rld-keynav() { killall keynav ; keynav daemonize ;}
rld-updatedb() { sudo updatedb ;}
rld-xbindkeys() { killall xbindkeys ; xbindkeys ;}
#rld-hyperkey() { xmodmap ~/.Xmodmap; killall xcape ; xcape -e 'Hyper_L=Return' ; killall xbindkeys ; xbindkeys ;}
#rld-xcape() { killall xcape ; xcape -e 'Hyper_L=Return' ;}
#rld-xdefaults() { xrdb ~/.Xdefaults ;}
rld-xmodmap() { xmodmap ~/.Xmodmap ;}
rld-xmodmap-uskeyboardlayout() { setxkbmap -layout us ;} # reset back to US keyboard http://unix.stackexchange.com/a/151046
#rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}
# }}}
#-------- Alias (Substitution) {{{
#------------------------------------------------------
# DESC: alias for mainly for existing commands

#alias bc='bc -q -l'					# dont show opening msg, use math library
# alias cal='cal -3 | grep --color -EC6 "\b$(date +%e | sed "s/ //g")"' # show calendar for 3 months
# alias cal='cal | grep --before-context 6 --after-context 6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias cal='cal -3m | grep -B6 -A6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias cp='cp -aiv'					# cp prompt confirmation
alias df='df -hT --total'				# human readable, print filetype, and total
alias du='du -d1 -h'					# max depth, human readable
#alias emacs='emacs -nw'					# cli mode
#alias feh='feh --auto-zoom --scale-down -g 1360x768 -B white'
#alias free='free -h'					# human readable
#alias info='info --vi-keys'				# GNU info act like man command
alias ln='ln -iv'
alias lsblk='lsblk -o "KNAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias mkdir='mkdir -p -v'				# create if not exist, verbose
#alias mocp='padsp mocp'                                 # moc player working with pulseaudio
#alias mount='mount | column -t'				# align in column
alias nano='nano -c -$'					# word wrapping
#alias nvlc='nvlc --no-color'				# vlc black/white color
#alias periscope='periscope -l en'			# get english subtitles
#alias pdfgrep='pdfgrep -in'				# ignorecase, page number
#alias qcp='qcp -f do'                                   # renameutils bulk copy (destination column only)
#alias qmv='qmv -f do'                                   # renameutils bulk rename (destination column only)
alias rmdir='rmdir -v'			                # rm empty directory only
#alias sr='sr -browser=$BROWSERCLI'			# open in cli browser
#alias surfraw='surfraw -browser=$BROWSER'		# open in gui browser
#alias w3m='w3m -num'					# w3m web browser with line number
alias wget='wget -N -c'					# continues/resumes
alias youtube-viewer='youtube-viewer -C -f -4 --results=6'  # color, fullscreen, 480p, number of results
#alias visudo='sudo EDITOR="$EDITOR" visudo'

#alias derez='rm -Iv'			                # rm interactive, prompt once only
#alias uhaul='mv -iv --'					# mv prompt confirmation

# color for common commands
# tutorial video: http://www.youtube.com/watch?v=RbVCzxnKJL4
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

## }}}
#-------- Alias (Good List) {{{
#------------------------------------------------------
# DESC: custom alias

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
#alias t="todo.sh"                                       # todotxt.sh program
alias trash='trash-put -v'
# alias vless="/usr/share/vim/vim74/macros/less.sh"       # vim as a pager
#alias vradio="vim ~/.pyradio.csv && killall mpg123"     # vim as radio player using pyradio.csv
#alias wttr='curl wttr.in'                               # wego weather forcast using only curl
#alias wttr-help='curl wttr.in/:help'

# wttr() { curl -H "Accept-Language: ${LANG%_*}" wttr.in/"${1:-Orange}" ;}
# }}}
#-------- Functions (Oneliner) {{{
#------------------------------------------------------

#cpbak() { cp $1{,.bak} ;}		          # create backup copy
#down4me() { curl -s "http://downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g' ;}   # check if a website is down
killall-zombies() { kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }') ;}  # kill zombie process
#mkdircd() { mkdir -p -v $1; cd $1 ;}	          # create folder then cd into it
#nohup-command() { nohup "$@" >/dev/null 2>&1& }   # background a process w/o error msg filling screen
open() { xdg-open "$@" > /dev/null 2>&1 ;}        # open with default GUI program

# }}}
#-------- Functions (Good List) {{{
#------------------------------------------------------
# DESC: custom functions

#update-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
#grub-update() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
#grub-list() {
#  RED='\033[0;31m'
#  sudo grep "menuentry '" /boot/grub/grub.cfg | less -N
#  echo -e "${RED} REMINDER: GRUB number starts at zero not one"
#}

# DESC: color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
manc() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;31m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[01;44;33m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[01;32m' \
  man "$@"
}

# list and grep with file permission
lsg() {
  keyword=$(echo "$@" |  sed 's/ /.*/g')
  ls -hlA --color=yes \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
  | grep -iE $keyword
}

# ls recent items at bottom with green TODAY yellow YESTERDAY substituted with file permission also
# https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# http://askubuntu.com/a/152005
lst() {
  ls -vAFqh --color=yes -got --time-style=long-iso "$@" \
  | sed "s/$(date +%Y-%m-%d)/\x1b[32m     TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

lsl() {
  ls -hl --color=yes "$@" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# DESC: cli calculator (Ctrl+D to exit)
# DEMO: http://www.youtube.com/watch?v=JkyodHenTuc
# LINK: http://docs.python.org/library/math.html
calc() {
  if which python2 &>/dev/null; then
    python2 -ic "from __future__ import division; from math import *; from random import *"
  elif which python3 &>/dev/null; then
    python3 -ic "from math import *; import cmath"
  elif which bc &>/dev/null; then
    bc -q -l
  else
    echo "Requires python2, python3 or bc for calculator features"
  fi
}


# http://www.webupd8.org/2016/08/easily-share-files-from-command-line.html
#transfer() {
#  if [ $# -lt 1 ]; then
#    echo -e "Easy file sharing from the command line https://transfer.sh"
#    echo -e "Usage:   $0 <filename>"
#    echo -e "Example: $0 file.zip file2.txt file3.jpg"
#    return 1
#  fi
#  myArray=( "$@" )
#  for arg in "${myArray[@]}"; do
#    tmpfile=$( mktemp -t transferXXX )
#    if tty -s; then
#      basefile=$(basename "$arg" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
#      curl --progress-bar --upload-file "$arg" "https://transfer.sh/$basefile" >> $tmpfile
#      else curl --progress-bar --upload-file "-" "https://transfer.sh/$arg" >> $tmpfile
#    fi
#    cat $tmpfile
#    rm -f $tmpfile
#  done
#}

# }}}
#-------- System Information {{{
#------------------------------------------------------
m-distro() { uname -a && lsb_release -a ;}
alias m-user='whoami'
alias m-host='hostname'
alias m-hardware='lspci'
alias m-cpu='cat /proc/cpuinfo'
alias m-memory='cat /proc/meminfo'
#}}}
#-------- Gotbletu Universal Package Manager {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=N8CZhlIssdk
# DESC: auto detect package manager and loads proper alias for it

# legends# {{{
# https://wiki.archlinux.org/index.php/Pacman_Rosetta
# http://old-en.opensuse.org/Software_Management_Command_Line_Comparison
# https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
# Arch			-- pacman, yaourt
# Debian/Ubuntu		-- apt-get(apt), aptitude, dpkg
# Gentoo		-- eclean, emerge, equery, layman
# OpenSuse		-- zypper
# Red Hat/Fedora	-- package-cleanup, rpm, yum
# Suse			-- rug
# Not finish, only tested on Debian, Arch, Fedora so far

# cleanold; removes certain packages that can no longer be downloaded
# cleanall; remove all local cached packages
# list; show the content of an installed package
# localinstall; install package manually such as deb, rpm files downloaded
# own; find a command a package belongs to; ex: pkm-own convert
# purge; uninstall package and purge configuration files (not in /home)
# query; search for an already installed package
# refresh; update repository list
# upgrade; install the newest version from the repositories
# hold/unhold; stop/allow a package from being update
#
# missing
# emerge: autoclean, purge, list, query
# rug: pkm-info, clean, autoremove, autoclean, purge, list, query
# zypper: pkm-info, autoremove, autoclean, purge, list, query
# yum: autoclean, purge
# }}}

find_pkm() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }
export PKMGR=$(find_pkm yaourt pacman pacaur aptitude apt-get yum zypper emerge)

# {{{ apt-get
if [ "$PKMGR" = "apt-get" ]; then
  pkm-cleanallall() { sudo apt-get clean ;}
  pkm-cleanallold() { sudo apt-get autoclean ;}
  pkm-dependsreverse() { apt-cache rdepends "$@" ;}
  pkm-download() { wget $(apt-get --print-uris -y install "$@" | grep ^\'| cut -d\' -f2) ;}
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  # same as; echo "pkgname hold" | dpkg --set-selections
  pkm-hold() { sudo apt-mark hold "$@" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { apt-cache show "$@" ;}
  pkm-install() { sudo apt-get install --no-install-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo apt-get purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo apt-get update ;}
  pkm-remove() { sudo apt-get remove "$@" ;}
  pkm-remove-orphans() { sudo apt-get autoclean ;}
  pkm-search() { apt-cache search "$@" ;}
  pkm-unhold() { sudo apt-mark unhold "$@" ;}
  pkm-upgrade() { sudo apt-get update && sudo apt-get upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  # auto get missing gpg keys from launchpad
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
    # these are extra servers, just replace it if one is down
    # keyserver.ubuntu.com
    # pool.sks-keyservers.net
    # subkeys.pgp.net
    # pgp.mit.edu
    # keys.nayr.net
    # keys.gnupg.net
    # wwwkeys.en.pgp.net #(replace with your country code fr, en, de,etc)
# }}}
# {{{ aptitude
elif [ "$PKMGR" = "aptitude" ]; then
  pkm-cleanallall() { sudo aptitude clean ;}
  pkm-cleanallold() { sudo aptitude autoclean ;}
  pkm-dependsreverse() { aptitude why "$@" ;}
  pkm-download() { aptitude download "$@" ;} # need a better 1; deb w/ depends
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  pkm-hold() { echo "$1 hold" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /hold/" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { aptitude show "$@" ;}
  pkm-install() { sudo aptitude install --without-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo aptitude purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo aptitude update ;}
  pkm-remove() { sudo aptitude remove "$@" ;}
  pkm-remove-orphans() { sudo aptitude autoclean ;}
  pkm-search() { aptitude search "$*" ;}
    # fix  maybe with keyword $@ | sed / / ~d/
  pkm-search-description() { aptitude search ~d"$1"~d"$2"~d"$3"~d"$4"~d"$5"~d"$6"~d"$7" ;}
  pkm-unhold() { echo "$1 install" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /install/" ;}
  pkm-upgrade() { sudo aptitude update && sudo aptitude upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
# }}}
# {{{ emerge
elif [ "$PKMGR" = "emerge" ]; then
  pkm-remove-orphans() { sudo emerge --depclean ;}
  pkm-cleanall() { sudo eclean distfiles ;}
  pkm-info() { emerge -S "$@" ;}
  pkm-install() { sudo emerge "$@" ;}
  pkm-pkgsearch() { equery belongs "$@" ;}
  pkm-refresh() { sudo layman -f ;}
  pkm-remove() { sudo emerge -C "$@" ;}
  pkm-search() { emerge -S "$@" ;}
  pkm-upgrade() { sudo emerge -u world ;}
# }}}
# {{{ pacaur
elif [ "$PKMGR" = "pacaur" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { pacaur -Sc ;}
  pkm-cleanold() { pacaur -Scc ;}
  if type -p downgrade > /dev/null; then
    # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    pacaur -Qi $arg 2> /dev/null \
    || pacaur -Si $arg; done ;}
  pkm-install() { pacaur --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacaur -Qql "$@" ;}
  pkm-listinstalled() { pacaur -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { pacaur -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacaur -Qs "$@" ;}
  pkm-refresh() { pacaur -Syy ;}
  pkm-remove() { pacaur -Rcs "$@" ;}
  pkm-remove-nodepends() { pacaur -Rdd "$@" ;}
  pkm-remove-orphans() { pacaur -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacaur -Qs "$@" && pacaur -s "$@" ;}
  pkm-search-local() { pacaur -Qs "$@" ;}
  pkm-upgrade() { pacaur -Syu ;}	# upgrade everything except aur package
  pkm-upgrade-aur() { pacaur --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ pacman
elif [ "$PKMGR" = "pacman" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { sudo pacman -Sc ;}
  pkm-cleanold() { sudo pacman -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;}
  pkm-info() { for arg in "$@"; do
    pacman -Qi $arg 2> /dev/null \
    || pacman -Si $arg; done ;}
  pkm-install() { sudo pacman -S "$@" ;}
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacman -Qql "$@" ;}
  pkm-listinstalled() { pacman -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { sudo pacman -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacman -Qs "$@" ;}
  pkm-refresh() { sudo pacman -Syy ;}
  pkm-remove() { sudo pacman -Rcs "$@" ;}
  pkm-remove-nodepends() { sudo pacman -Rdd "$@" ;}
  pkm-remove-orphans() { sudo pacman -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacman -Ss "$@" ;}
  pkm-search-local() { pacman -Qs "$@" ;}
  pkm-upgrade() { sudo pacman -Syu ;}
# }}}
# {{{ rug
elif [ "$PKMGR" = "rug" ]; then
  pkm-install() { sudo rug install "$@" ;}
  pkm-refresh() { sudo rug refresh ;}
  pkm-remove() { sudo rug remove "$@" ;}
  pkm-search() { rug search "$@" ;}
  pkm-upgrade() { sudo rug update ;}
# }}}
# {{{ yaourt
elif [ "$PKMGR" = "yaourt" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { yaourt -Sc ;}
  pkm-cleanold() { yaourt -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    yaourt -Qi $arg 2> /dev/null \
    || yaourt -Si $arg; done ;}
  pkm-install() { yaourt --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { yaourt -Qql "$@" ;}
  pkm-listinstalled() { yaourt -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { yaourt -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { yaourt -Qs "$@" ;}
  pkm-refresh() { yaourt -Syy ;}
  pkm-remove() { yaourt -Rcs "$@" ;}
  pkm-remove-nodepends() { yaourt -Rdd "$@" ;}
  pkm-remove-orphans() { yaourt -Rs $(pacman -Qqtd) ;}
  pkm-search() { yaourt --noconfirm "$@" ;}
  pkm-search-local() { yaourt -Qs "$@" ;}
  pkm-upgrade() { yaourt -Syu ;}	# upgrade everything except aur package
  pkm-upgrade-aur() { yaourt --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ yum
elif [ "$PKMGR" = "yum" ]; then
  pkm-cleanall() { sudo yum clean ;}
  pkm-depends() { sudo yum deplist "$@" ;}
  pkm-dependsreverse() { sudo yum resolvedep "$@" ;}
  pkm-info() { for arg in "$@"; do
    rpm -qi $arg 2> /dev/null || yum info $arg; done ;}
  pkm-install() { sudo yum install "$@" ;}
  pkm-list() { for arg in "$@"; do
    rpm -ql $arg 2> /dev/null || repoquery -ql --plugins $arg; done ;}
  pkm-localinstall() { sudo yum localinstall "$@" ;}
  pkm-own() { rpm -qf $(which "$@") ;}
  pkm-pkgsearch() { yum whatprovides "$@" ;}
  pkm-query() { rpm -q "$@" ;}
  pkm-refresh() { sudo yum clean expire-cache && sudo yum check-update ;}
  pkm-remove() { sudo yum remove "$@" ;}
  pkm-remove-orphans() { sudo package-cleanup --leaves ;}
  pkm-search() { yum search "$@" ;}
  pkm-upgrade() { sudo yum update ;}
# }}}
# {{{ zypper
elif [ "$PKMGR" = "zypper" ]; then
  pkm-cleanall() { sudo zypper clean ;}
  pkm-install() { sudo zypper install "$@" ;}
  pkm-pkgsearch() { zypper what-provides "$@" ;}
  pkm-refresh() { sudo zypper refresh ;}
  pkm-remove() { sudo zypper remove "$@" ;}
  pkm-search() { zypper search "$@" ;}
  pkm-upgrade() { sudo zypper update ;}
fi
# }}}

#}}}

####################
##### INTERNET #####
####################

#-------- Youtube-dl (Stream|Download|RipAudio) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=MFxlwVhwayg
# DESC: download/stream media from many online sites
youtube-dl-stream() { youtube-dl -o - "$1" | $PLAYER - ;}

# DESC: convert youtube to audio (youtube.com only)
# -f 171 = webm audio (vorbis)
# -f 140 = m4a (aac)
yt2ogg() { youtube-dl -c --restrict-filenames -x --audio-format vorbis -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2wav() { youtube-dl -c --restrict-filenames -x --audio-format wav -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 140 "$@" ;}
yt2webmaudio() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2m4a() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 140 "$@" ;}

## Youtube-dl for Facebook
fb2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 140/m4a/webm/bestaudio "$@" ;}

# }}}
#-------- Peerflix v2 (Popcorntime CLI) [last updated July 27, 2016] {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=NG13yOTPgfY
# LINK: https://github.com/saironiq/shellscripts
# DESC: popcorntime from terminal

peerflix-viewer() {
  # choose a player
  # PFLIX_VIDPLAYER=cvlc
  # PFLIX_VIDPLAYER=mplayer
  PFLIX_VIDPLAYER=mpv

  # ip address and port for video player to connect to
  PFLIX_IPADDR=localhost
  PFLIX_PORT=55055

  echo "${Yellow}>>>Check if peerflix stream is alive at $PFLIX_IPADDR:$PFLIX_PORT [hit Ctrl+C on this screen to exit properly] ${Color_Off}"
    until nc -vzw 2 "$PFLIX_IPADDR" "$PFLIX_PORT"; do sleep 2; done
  echo "${Green}>>>Connecting to peerflix stream ${Color_Off}"
    ($PFLIX_VIDPLAYER http://"$PFLIX_IPADDR":"$PFLIX_PORT")
  echo "${On_IRed}>>>Video Player has exited properly. Killing peerflix stream now ${Color_Off}"
    wait
    killall peerflix
}

# }}}
#-------- MPSYT-Youtube Channels {{{
#------------------------------------------------------
# tutorial video: https://www.youtube.com/watch?v=VE2iCBkIs8E
mpsyt-linux-gotbletu() { mpsyt user gotbletu ;}

mpsyt-web-traversymedia() { mpsyt user TechGuyWeb ;}
mpsyt-web-alecaddd() { mpsyt user williamprey ;}
mpsyt-web-wesbos() { mpsyt user wesbos ;}
mpsyt-web-leveluptuts() { mpsyt user LevelUpTuts ;}
mpsyt-web-learnwebcode() { mpsyt user LearnWebCode ;}
mpsyt-web-kevinpowell() { mpsyt user KepowOb ;}
mpsyt-web-mmtuts() { mpsyt user TheCharmefis ;}
mpsyt-web-learncodeacademy() { mpsyt user learncodeacademy ;}
mpsyt-web-jesseshowalter() { mpsyt user JesseAtomic ;}
mpsyt-web-chriscoyier() { mpsyt user realcsstricks ;}

# }}}
#-------- Youtube-Viewer Channels {{{
#------------------------------------------------------
# tutorial video: http://www.youtube.com/watch?v=FnJ67oAxVQ4
# watch/login/comment/search/download...etc video on youtube, all from cli
# https://github.com/trizen/youtube-viewer
yt-listen() { youtube-viewer -n $@ ;}	# no video, music/audio only
#yt-music() { youtube-viewer -n --category=Music --top ;}	# show top music list
#yts-movie-movieclipstrailer() { youtube-viewer -u UCi8e0iOVk1fEOogdfu4YgfA ;}
#yts-afterbuzz-arrowaftershow() { youtube-viewer -p PL6THzna6gLceNeZoXKUOoDeO7cwI57rJn ;}
## }}}

####################
##### MISC #########
####################

#-------- Fasd (Jump and Open Files Quickly) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ur81Y-mV5Us
# LINK: https://github.com/clvv/fasd
# DESC: jump to path or open recent files quickly from cli

if which fasd >/dev/null; then
  eval "$(fasd --init auto)"	# get fasd working, initialization code

  # different fasd listing
  # alias a='fasd -a'               # any
  # alias s='fasd -si'              # show / search / select
  # alias d='fasd -d'               # directory
  # alias f='fasd -f'               # file
  # alias sd='fasd -sid'            # interactive directory selection
  # alias sf='fasd -sif'            # interactive file selection
  # alias z='fasd_cd -d'            # cd, same functionality as j in autojump
  # alias zz='fasd_cd -d -i'        # cd with interactive selection

  # open with external programs
  alias m="f -e $PLAYER"		# open with video player
  alias o="a -e $OPENER"		# open any file
  alias v="f -e $EDITOR"		# open with text editor
fi
#}}}

####################
##### QUEUE ########
####################
# Code that is working good but needs to be used for a while before including it to the next level up

#-------- Alias Custom {{{
#------------------------------------------------------
# alias sudo='sudo -i'
# alias sudo='sudo '					# make aliases work with sudo
# alias ps="ps aux | grep -v grep | grep "
# alias ff="find . |grep "
# alias pp="ps aux |grep "
# alias oo="xdg-open "

# For emergencies
#alias asdf='setxkbmap fr bepo'

#alias xclipin='xclip -sel c -in <'
#alias xclipout='xclip -sel c -out >'
#alias psg='ps aux|grep -v grep|grep -i '
#psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
#alias sshxforwarding='ssh -XCc blowfish-cbc,arcfour'
#alias sshxtrusted='ssh -Y'
#alias stackexchange='lynx http://column80.com'		# lookup information
#alias xev-keycode="xev | grep 'keycode\|button'"
# alias weechat='weechat-curses'
alias lsd='ls -1d */'					# ls folders only
alias l='ls -l'
alias lsf='ls --color=always -p | grep -v '/$''		# ls files only
alias lsa='ls -GghA'
alias lsx='ls -lX'
# alias lst='ls -Ggthrc'				# ls by time/changes, newest at bottom



# }}}
#-------- Functions {{{
#------------------------------------------------------

#unlock() { keepassc -d ~/.keepass/masterlock.kdb ;}


# change font size (guake terminal)
# tutorial video: http://www.youtube.com/watch?v=i9aKFgxOjwQ
#chfontsize() {
#  # guake
#  gconftool-2 --set '/apps/guake/style/font/style' --type string "Monospace ${1:-16}"
#
#  #gnome-terminal
#  dconf write /org/gnome/terminal/legacy/profiles:/$(dconf list /org/gnome/terminal/legacy/profiles:/)font "'Monospace ${1:-16}'"
#}



# view markdown as manpages
# http://blog.metamatt.com/blog/2013/01/09/previewing-markdown-files-from-the-terminal/
#mdless(){ pandoc -s -f markdown -t man "$*" | groff -T utf8 -man | less ;}

# quickly cd out of directories using numbers, example: up 2
#up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

# show file access permission
# http://unix.stackexchange.com/a/46921
file-permission() { stat --format '%a %n' "$@" ;}

# display mime of file application/zip, application/x-tar
file-type() { file --mime-type -b "$@" ;}

# call vim help page from shell prompt
#function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

# searches for manual locally or online
#manned() {
#  for arg in "$@"; do man $arg 2> /dev/null \
#  || $arg -H 2> /dev/null || $arg -h 2> /dev/null \
#  || $arg --help-all 2> /dev/null || $arg --help 2> /dev/null \
#  || help $arg 2> /dev/null \
#  || $BROWSERCLI "http://manned.org/browse/search?q=$@" 2> /dev/null \
#  || $BROWSER "http://manned.org/browse/search?q=$@" 2> /dev/null \
#  || open "http://manned.org/browse/search?q=$@" 2> /dev/null \
#  || xdg-open "http://manned.org/browse/search?q=$@"
#  done
#}

# search commandlinefu.com
#cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
#	| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

# display one random command from commandlinefu.com
#cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}
#

# w3m browser with inline images
# https://plus.google.com/102499719144563443986/posts/Vja8W69iHoi
# tutorial video: http://www.youtube.com/watch?v=R2bMUtCOGko
#w3mimg() { w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay $1 ;}

#}}}

####################
##### TESTING ######
####################
# New code dump, stuff I am creating or copy from others

#-------- Keyboard related {{{
#------------------------------------------------------

#touchpad-toggle() { synclient TouchpadOff=$(synclient -l | grep -c ‘TouchpadOff.*=.*0’) ;}
#lang-toggle() { setxkbmap -option grp:alt_caps_toggle "us,jp" ;}
#vim-toggle() {
## https://xpressrazor.wordpress.com/2014/03/30/script-to-toggle-keys
## toggle caplock and esc key
#if xmodmap -pke | egrep -i "escape" | egrep -i "keycode.*9.*"; then
# echo "Changing from original to mapped"
# xmodmap -e "clear lock"
# xmodmap -e "keycode 66 = Escape"
# xmodmap -e "keycode 9 = Caps_Lock"
# xmodmap -e "add Lock = Caps_Lock"
#else
# echo "Changing back from mapped to original"
# xmodmap -e "clear lock"
# xmodmap -e "keycode 9 = Escape"
# xmodmap -e "keycode 66 = Caps_Lock"
# xmodmap -e "add Lock = Caps_Lock"
#fi
#}
# }}}
#-------- Function Informations {{{
#------------------------------------------------------

function    osr              { shutdown -r now; }
function    osh              { shutdown -h now; }

#function    mfloppy          { mount /dev/fd0 /mnt/floppy; }
#function    umfloppy         { umount /mnt/floppy; }
#function    mdvd             { mount -t iso9660 -o ro /dev/dvd /mnt/dvd; }
#function    umdvd            { umount /mnt/dvd; }
#function    mcdrom           { mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom; }
#function    umcdrom          { umount /mnt/cdrom; }
#function    dub              { du -sclb $@; }
#function    duk              { du -sclk $@; }
#function    dum              { du -sclm $@; }
#function    dfk              { df -PTak $@; }
#function    dfm              { df -PTam $@; }
#function    dfh              { df -PTah $@; }
#function    dfi              { df -PTai $@; }
# }}}
# Git Shortcuts! ##
# alias g="git"
# alias gr="git rm -rf"
# alias gs="git status"
# alias ga="g add"
# alias gc="git commit -m"
# alias gp="git push origin master"
# alias gl="git pull origin master"
#-------- Folder Jumplist {{{
#------------------------------------------------------
# go, gs

gh() { cd ~ && lst ;}
g/() { cd / && lst ;}
#gr() { cd /run/media && lst ;}
#gm() { cd /media && lst ;}
#gM() { cd ~/Music && lst ;}
#gD() { cd ~/Documents && lst ;}
#gd() { cd ~/Downloads && lst ;}
#ge() { cd ~/DL_Torrent && lst ;}
#gp() { cd ~/Pictures && lst ;}
#gP() { cd ~/Public && lst ;}
#gS() { cd ~/.scripts && lst ;}
#gw() { cd ~/Pictures/Wallpapers && lst ;}
#gx() { cd ~/MA_Blackbox/iCloud && lst ;}
#gu() { cd ~/Public/github_repository/shownotes && lst ;}
#gi() { cd /tmp/fuseiso && lst ;}

# }}}



############################
##### WEB DEVELOPMENT ######
############################


#visual studio code issue
codex() { code --disable-gpu $@ ;}

#browser-sync alias
bsync() { browser-sync start --server --files "*" ;}


#-------- Laravel {{{
#------------------------------------------------------

# Artisan
art() { php artisan $@ ;}

# Route
visit() {
  curl -I http://localhost:3000/$1
}

# Sail
alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'

# Vagrant
alias v="vagrant"
alias vu="cd ~/projects/Homestead && vagrant up"


# }}}

# Simple Server for file sharing
alias myserver="python2 -m SimpleHTTPServer 8080"


############################
#### WINDOWS POWERSHELL ####
############################

wsl() { wsl.exe $@ ;}
function winget { (cd /mnt/c; cmd.exe /c "winget $@";) }