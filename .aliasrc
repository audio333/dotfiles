# source: https://github.com/gotbletu/dotfiles/blob/master/aliasrc/.aliasrc

#---------------------
# System
#---------------------

## Set Default Programs

# DESC: check and choose the first program in the array that is installed as the default

# find alternative apps if it is installed on your system
find_alt() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }

# set the default program
# the first program in the array that is detected on your system will be chosen as the default
export OPENER=$(find_alt xdg-open exo-open gnome-open )
export BROWSER=$(find_alt chromium chromium-browser qutebrowser google-chrome firefox $OPENER )
# export BROWSERCLI=$(find_alt w3m links2 links lynx elinks $OPENER )
# export BROWSERTOR=$(find_alt tor-browser-en)
# export COMICER=$(find_alt mcomix comix zathura $OPENER )
# export EBOOKER=$(find_alt ebook-viewer $OPENER )
export EDITOR=$(find_alt vim vi nano subl code gedit $OPENER )
export EDITORGUI=$(find_alt subl code gedit $OPENER )
# export WORDPROCESSOR=$(find_alt wordgrinder $OPENER )
export FILEMANAGER=$(find_alt pcmanfm thunar nautilus dolphin spacefm enlightenment_filemanager $OPENER )
export FILEMANAGERCLI=$(find_alt ranger vifm mc $OPENER )
export MUSICER=$(find_alt mpv mplayer mpg123 cvlc $OPENER )
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mpv mplayer ffplay cvlc $OPENER )
# export READER=$(find_alt mupdf zathura evince $OPENER )
export ROOTER=$(find_alt gksudo kdesudo )
export IMAGEVIEWER=$(find_alt feh ristretto display eog $OPENER )
# export QUEUER=$(find_alt tsp fq ts )
export TERMER=$(find_alt terminator urxvt xterm uxterm termite sakura lxterminal mate-terminal pantheon-terminal konsole gnome-terminal xfce4-terminal $OPENER )



#---------------------
# Visual
#---------------------

## Bash Color Code
### DESC: color code for bash compatible shell
### LINK: https://wiki.archlinux.org/index.php?title=Bash/Prompt_customization&oldid=419076#List_of_colors_for_prompt_and_Bash

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White


## Blinking Bash Color Code
### DESC: blinking color code for bash compatible shell, only works on some terminals e.g xterm, urxvt

# Regular Colors
Blink_Black='\e[0;30;5m'        # Black
Blink_Red='\e[0;31;5m'          # Red
Blink_Green='\e[0;32;5m'        # Green
Blink_Yellow='\e[0;33;5m'       # Yellow
Blink_Blue='\e[0;34;5m'         # Blue
Blink_Purple='\e[0;35;5m'       # Purple
Blink_Cyan='\e[0;36;5m'         # Cyan
Blink_White='\e[0;37;5m'        # White

# Bold
Blink_BBlack='\e[1;30;5m'       # Black
Blink_BRed='\e[1;31;5m'         # Red
Blink_BGreen='\e[1;32;5m'       # Green
Blink_BYellow='\e[1;33;5m'      # Yellow
Blink_BBlue='\e[1;34;5m'        # Blue
Blink_BPurple='\e[1;35;5m'      # Purple
Blink_BCyan='\e[1;36;5m'        # Cyan
Blink_BWhite='\e[1;37;5m'       # White

# Underline
Blink_UBlack='\e[4;30;5m'       # Black
Blink_URed='\e[4;31;5m'         # Red
Blink_UGreen='\e[4;32;5m'       # Green
Blink_UYellow='\e[4;33;5m'      # Yellow
Blink_UBlue='\e[4;34;5m'        # Blue
Blink_UPurple='\e[4;35;5m'      # Purple
Blink_UCyan='\e[4;36;5m'        # Cyan
Blink_UWhite='\e[4;37;5m'       # White

# Background
Blink_On_Black='\e[40;5m'       # Black
Blink_On_Red='\e[41;5m'         # Red
Blink_On_Green='\e[42;5m'       # Green
Blink_On_Yellow='\e[43;5m'      # Yellow
Blink_On_Blue='\e[44;5m'        # Blue
Blink_On_Purple='\e[45;5m'      # Purple
Blink_On_Cyan='\e[46;5m'        # Cyan
Blink_On_White='\e[47;5m'       # White

# High Intensity
Blink_IBlack='\e[0;90;5m'       # Black
Blink_IRed='\e[0;91;5m'         # Red
Blink_IGreen='\e[0;92;5m'       # Green
Blink_IYellow='\e[0;93;5m'      # Yellow
Blink_IBlue='\e[0;94;5m'        # Blue
Blink_IPurple='\e[0;95;5m'      # Purple
Blink_ICyan='\e[0;96;5m'        # Cyan
Blink_IWhite='\e[0;97;5m'       # White

# Bold High Intensity
Blink_BIBlack='\e[1;90;5m'      # Black
Blink_BIRed='\e[1;91;5m'        # Red
Blink_BIGreen='\e[1;92;5m'      # Green
Blink_BIYellow='\e[1;93;5m'     # Yellow
Blink_BIBlue='\e[1;94;5m'       # Blue
Blink_BIPurple='\e[1;95;5m'     # Purple
Blink_BICyan='\e[1;96;5m'       # Cyan
Blink_BIWhite='\e[1;97;5m'      # White

# High Intensity backgrounds
Blink_On_IBlack='\e[0;100;5m'   # Black
Blink_On_IRed='\e[0;101;5m'     # Red
Blink_On_IGreen='\e[0;102;5m'   # Green
Blink_On_IYellow='\e[0;103;5m'  # Yellow
Blink_On_IBlue='\e[0;104;5m'    # Blue
Blink_On_IPurple='\e[10;95;5m'  # Purple
Blink_On_ICyan='\e[0;106;5m'    # Cyan
Blink_On_IWhite='\e[0;107;5m'   # White

#---------------------
#  Configurations
#---------------------

## Edit Config

cfg-aliasrc() { $EDITOR ~/.aliasrc ;}
# cfg-abookrc() { $EDITOR ~/.abook/abookrc ;}
# cfg-addressbook() { $EDITOR ~/.abook/addressbook ;}
cfg-autostartrc() { $EDITOR ~/.autostartrc ;}
cfg-bashrc() { $EDITOR ~/.bashrc ;}
# cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh ;}
# cfg-cava() { $EDITOR ~/.config/cava/config ;}
# cfg-clonezilla() { sudo $EDITOR /etc/drbl/drbl.conf ;}
# https://wiki.archlinux.org/index.php/Cursor_Themes#Choosing_and_Configuring_Cursor_Themes
# cfg-cursor() { $EDITOR ~/.icons/default/index.theme ;}
# cfg-cursor-list() { ls ~/.icons ;}
# cfg-emacs() { $EDITOR ~/.emacs ;}
# cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg ;}
# cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg ;}
# cfg-flexget() { $EDITOR ~/.flexget/config.yml ;}
# cfg-fstab() { sudo $EDITOR /etc/fstab ;}
cfg-gitignore() { $EDITOR ~/Public/dotfiles/.gitignore ;}
# cfg-greenclip() { killall greenclip ; $EDITOR ~/.config/greenclip.cfg && nohup greenclip daemon > /dev/null 2>&1 & }
# cfg-group() { sudo $EDITOR /etc/group ;}
# cfg-grub() { sudo $EDITOR /etc/default/grub ;}
# cfg-hintrc() { $EDITOR ~/.hintrc ;}
cfg-hosts() { sudo $EDITOR /etc/hosts ;}
# cfg-hyperterminal() { $EDITOR ~/.hyper.js ;}
# cfg-i3wm() { $EDITOR ~/.i3/config ;}
# cfg-inputrc() { $EDITOR ~/.inputrc ;}
# cfg-internetarchive() { $EDITOR ~/.config/ia.ini ;} # archive.org downloader https://internetarchive.readthedocs.io/en/latest/
# cfg-keynavrc() { $EDITOR ~/.keynavrc ;}
# cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml ;}
# cfg-kodi-confluencethumbnailview() { sudo $EDITOR /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml ;}
# cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg ;}
# cfg-livestreamer() { $EDITOR ~/.livestreamerrc ;}
# cfg-mailcap() { $EDITOR ~/.mailcap ;}
# cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc ;}
# cfg-mc() { $EDITOR ~/.config/mc/ini ;}
# cfg-mc-keymap() { $EDITOR ~/.config/mc/mc.keymap ;}
# cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf ;}
# cfg-megarc() { $EDITOR ~/.megarc ;}
# cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
cfg-mpv() { $EDITOR ~/.config/mpv/mpv.conf ;}
cfg-mpv-input() { $EDITOR ~/.config/mpv/input.conf ;}
# cfg-mocp() { $EDITOR ~/.moc/config ;}
# cfg-muttrc() { $EDITOR ~/.muttrc ;}
cfg-nanorc() { $EDITOR ~/.nanorc;}
# cfg-nap() { $EDITOR ~/.nap/napconf ;}
# cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
# cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
# cfg-netrc() { $EDITOR ~/.netrc;}
# cfg-newsbeuter() { $EDITOR ~/.newsbeuter/config ;}
# cfg-newsbeuter-queue() { $EDITOR ~/.newsbeuter/queue ;}
# cfg-newsbeuter-urls() { $EDITOR ~/.newsbeuter/urls ;}
# cfg-newsboat() { $EDITOR ~/.newsboat/config ;}
# cfg-newsboat-queue() { $EDITOR ~/.newsboat/queue ;}
# cfg-newsboat-urls() { $EDITOR ~/.newsboat/urls ;}
cfg-nvim() { $EDITOR ~/.config/nvim/init.vim ;}
# cfg-pastebinit() { $EDITOR ~/.pastebinit.xml ;}
# cfg-pianobar() { $EDITOR ~/.config/pianobar/config ;}
# cfg-pianobar-libao() { sudo $EDITOR /etc/libao.conf ;}
# cfg-profile() { $EDITOR ~/.profile ;}
# cfg-pulseaudio() { sudo $EDITOR /etc/pulse/default.pa ;}
# cfg-pyload() { $EDITOR ~/.pyload/pyload.conf ;}
# cfg-pyradio() { $EDITOR ~/.pyradio/stations.csv ;}
# cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
# cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
# cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
# cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg ;}
# cfg-rofibangs() { $EDITOR ~/.scripts/rofi-scripts-collection/rofi-bangs.sh ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
# cfg-retroarch() { $EDITOR ~/.config/retroarch/retroarch.cfg ;}
# cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg ;}
# cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
# cfg-skippyxd() { $EDITOR ~/.skippy-xd.rc ;}
# cfg-slrnrc() { $EDITOR ~/.slrnrc ;}
# cfg-ssh-client() { sudo $EDITOR /etc/ssh/ssh_config ;}
# cfg-ssh-daemon() { sudo $EDITOR /etc/ssh/sshd_config ;}
# cfg-sudoers() { sudo $EDITOR /etc/sudoers ;}
# cfg-bookmarks() { $EDITOR ~/.config/surfraw/bookmarks ;}
# cfg-sakura() { $EDITOR ~/.config/sakura/sakura.conf ;}
# cfg-surfraw() { $EDITOR ~/.config/surfraw/conf ;}
# cfg-syncthing() { $EDITOR ~/.config/syncthing/config.xml ;}
cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
# cfg-tor() { sudo $EDITOR /etc/tor/torrc ;}
# cfg-tor-user() { $EDITOR ~/.torrc ;}
# cfg-torrentflix() { torrentflix --config=$EDITOR ;}
# cfg-torrench() { $EDITOR ~/.config/torrench/config.ini ;}
# cfg-tpb() { $EDITOR ~/.scripts/tpb.sh ;}
# cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json ;}
# cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg ;}
# cfg-trz() { $EDITOR ~/.scripts/trz.sh ;}
# cfg-turses() { $EDITOR ~/.turses/config ;}
# cfg-urlview() { $EDITOR ~/.urlview ;}
# cfg-updatedb() { sudo $EDITOR /etc/updatedb.conf ;}
# cfg-vifmrc() { $EDITOR ~/.config/vifm/vifmrc ;}
cfg-vimrc() { $EDITOR ~/.vimrc ;}
# cfg-w3m() { $EDITOR ~/.w3m/config ;}
# cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap ;}
# cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap ;}
# cfg-wegorc() { $EDITOR ~/.wegorc ;}
# cfg-xbindkeysrc() { $EDITOR ~/.xbindkeysrc && killall xbindkeys ; xbindkeys ;}
# cfg-xboxdrv() { sudo $EDITOR /etc/default/xboxdrv ;}
cfg-xmodmap() { $EDITOR ~/.Xmodmap ;}
# cfg-xresources() { $EDITOR ~/.Xresources ;}
# cfg-yaourtrc() { $EDITOR ~/.yaourtrc ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}
# cfg-zurlrc() { $EDITOR ~/.zurlrc ;}

## Reload Config

rld-bashrc() { source ~/.bashrc ;}
rld-font() { fc-cache -v -f ;}
# rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
# rld-greenclip() { killall greenclip ; nohup greenclip daemon > /dev/null 2>&1 & }
# rld-keynav() { killall keynav ; keynav daemonize ;}
# rld-updatedb() { sudo updatedb ;}
# rld-xbindkeys() { killall xbindkeys ; xbindkeys ;}
rld-hyperkey() { xmodmap ~/.Xmodmap; killall xcape ; xcape -e 'Hyper_L=Return' ; killall xbindkeys ; xbindkeys ;}
# rld-xcape() { killall xcape ; xcape -e 'Hyper_L=Return' ;}
# rld-xdefaults() { xrdb ~/.Xdefaults ;}
rld-xmodmap() { xmodmap ~/.Xmodmap ;}
rld-xmodmap-uskeyboardlayout() { setxkbmap -layout us ;} # reset back to US keyboard http://unix.stackexchange.com/a/151046
# rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}


#---------------------
#  Alias (Substitution)
#---------------------

### DESC: alias for mainly for existing commands

# alias bc='bc -q -l'					# dont show opening msg, use math library
# alias cal='cal -3 | grep --color -EC6 "\b$(date +%e | sed "s/ //g")"' # show calendar for 3 months
# alias cal='cal | grep --before-context 6 --after-context 6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
# alias cal='cal -3m | grep -B6 -A6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
# alias cp='cp -aiv'					# cp prompt confirmation
# alias df='df -hT --total'				# human readable, print filetype, and total
# alias du='du -d1 -h'					# max depth, human readable
# alias emacs='emacs -nw'					# cli mode
# alias feh='feh --auto-zoom --scale-down -g 1360x768 -B white'
# alias free='free -h'					# human readable
# alias info='info --vi-keys'				# GNU info act like man command
# alias ln='ln -iv'
alias lsblk='lsblk -o "KNAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias mkdir='mkdir -p -v'				# create if not exist, verbose
# alias mocp='padsp mocp'                                 # moc player working with pulseaudio
# alias mount='mount | column -t'				# align in column
alias nano='nano -c -$'					# word wrapping
# alias nvlc='nvlc --no-color'				# vlc black/white color
# alias periscope='periscope -l en'			# get english subtitles
# alias pdfgrep='pdfgrep -in'				# ignorecase, page number
# alias qcp='qcp -f do'                                   # renameutils bulk copy (destination column only)
# alias qmv='qmv -f do'                                   # renameutils bulk rename (destination column only)
alias rmdir='rmdir -v'			                # rm empty directory only
# alias sr='sr -browser=$BROWSERCLI'			# open in cli browser
# alias surfraw='surfraw -browser=$BROWSER'		# open in gui browser
# alias w3m='w3m -num'					# w3m web browser with line number
# alias wget='wget -N -c'					# continues/resumes
# alias visudo='sudo EDITOR="$EDITOR" visudo'

# alias derez='rm -Iv'			                # rm interactive, prompt once only
# alias uhaul='mv -iv --'					# mv prompt confirmation

## Custom Aliases

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
# alias t="todo.sh"                                       # todotxt.sh program
alias trash='trash-put -v'


#-----------------------------
#  Color for common commands
#-----------------------------

### tutorial video: http://www.youtube.com/watch?v=RbVCzxnKJL4
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi


#---------------------
#  Functions
#---------------------

## OneLiner

# cpbak() { cp $1{,.bak} ;}		          # create backup copy
down4me() { curl -s "http://downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g' ;}   # check if a website is down
# killall-zombies() { kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }') ;}  # kill zombie process
mkdircd() { mkdir -p -v $1; cd $1 ;}	          # create folder then cd into it
# nohup-command() { nohup "$@" >/dev/null 2>&1& }   # background a process w/o error msg filling screen
open() { xdg-open "$@" > /dev/null 2>&1 ;}        # open with default GUI program


## Custom Functions

# DESC: color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
manc() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;31m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[01;44;33m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[01;32m' \
  man "$@"
}

### list and grep with file permission
lsg() {
  keyword=$(echo "$@" |  sed 's/ /.*/g')
  ls -hlA --color=yes \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
  | grep -iE $keyword
}

### ls recent items at bottom with green TODAY yellow YESTERDAY substituted with file permission also
# https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# http://askubuntu.com/a/152005
lst() {
  ls -vAFqh --color=yes -got --time-style=long-iso "$@" \
  | sed "s/$(date +%Y-%m-%d)/\x1b[32m     TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

lsl() {
  ls -hl --color=yes "$@" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}


#---------------------
#  System Information
#---------------------

### uses ip or ifconfig, good on older or newer system
m-ip() {
  echo "--------------- Network Information ---------------"
  echo "router ip:" $(netstat -rn | awk 'FNR == 3 {print $2}')
  # newer system like archlinux
  ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1
  ip addr | awk '/global/ {print $3,$4}'
  ip addr | awk '/ether/ {print $1,$2}'
  ip addr | awk '/scope link/ {print $1,$2}' | cut -d\/ -f1
  # older system like debian
  ifconfig | awk '/inet addr/ {print $1,$2}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/Bcast/ {print $3}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/inet addr/ {print $4}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/HWaddr/ {print $4,$5}'
  ifconfig | awk '/Scope:Link/ {print $1,$3}' | cut -d\/ -f1
  # echo External IP $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
  # echo External IP: $(curl -s http://ipaddr.io/)
  # echo External IP: $(curl -s https://icanhazip.com/)
  # echo External IP: $(curl -s https://ifconfig.co/)
  # echo External IP: $(curl -s http://pasteip.me/api/cli/ && echo)
  echo external ip: $(curl -s http://ipecho.net/plain)
  echo "---------------------------------------------------"
}


#---------------------------------------
#  Gotbletu Universal Package Manager
#---------------------------------------

# DEMO: https://www.youtube.com/watch?v=N8CZhlIssdk
# DESC: auto detect package manager and loads proper alias for it

# legends# {{{
# https://wiki.archlinux.org/index.php/Pacman_Rosetta
# http://old-en.opensuse.org/Software_Management_Command_Line_Comparison
# https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
# Arch			-- pacman, yaourt
# Debian/Ubuntu		-- apt-get(apt), aptitude, dpkg
# Gentoo		-- eclean, emerge, equery, layman
# OpenSuse		-- zypper
# Red Hat/Fedora	-- package-cleanup, rpm, yum
# Suse			-- rug
# Not finish, only tested on Debian, Arch, Fedora so far

# cleanold; removes certain packages that can no longer be downloaded
# cleanall; remove all local cached packages
# list; show the content of an installed package
# localinstall; install package manually such as deb, rpm files downloaded
# own; find a command a package belongs to; ex: pkm-own convert
# purge; uninstall package and purge configuration files (not in /home)
# query; search for an already installed package
# refresh; update repository list
# upgrade; install the newest version from the repositories
# hold/unhold; stop/allow a package from being update
#
# missing
# emerge: autoclean, purge, list, query
# rug: pkm-info, clean, autoremove, autoclean, purge, list, query
# zypper: pkm-info, autoremove, autoclean, purge, list, query
# yum: autoclean, purge
# }}}

find_pkm() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }
export PKMGR=$(find_pkm aptitude apt-get)

## apt-get
if [ "$PKMGR" = "apt-get" ]; then
  pkm-cleanallall() { sudo apt-get clean ;}
  pkm-cleanallold() { sudo apt-get autoclean ;}
  pkm-dependsreverse() { apt-cache rdepends "$@" ;}
  pkm-download() { wget $(apt-get --print-uris -y install "$@" | grep ^\'| cut -d\' -f2) ;}
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  ### same as; echo "pkgname hold" | dpkg --set-selections
  pkm-hold() { sudo apt-mark hold "$@" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { apt-cache show "$@" ;}
  pkm-install() { sudo apt-get install --no-install-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo apt-get purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo apt-get update ;}
  pkm-remove() { sudo apt-get remove "$@" ;}
  pkm-remove-orphans() { sudo apt-get autoclean ;}
  pkm-search() { apt-cache search "$@" ;}
  pkm-unhold() { sudo apt-mark unhold "$@" ;}
  pkm-upgrade() { sudo apt-get update && sudo apt-get upgrade ;}
  ### PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  ### auto get missing gpg keys from launchpad
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
    # these are extra servers, just replace it if one is down
    # keyserver.ubuntu.com
    # pool.sks-keyservers.net
    # subkeys.pgp.net
    # pgp.mit.edu
    # keys.nayr.net
    # keys.gnupg.net
    # wwwkeys.en.pgp.net #(replace with your country code fr, en, de,etc)
## aptitude
elif [ "$PKMGR" = "aptitude" ]; then
  pkm-cleanallall() { sudo aptitude clean ;}
  pkm-cleanallold() { sudo aptitude autoclean ;}
  pkm-dependsreverse() { aptitude why "$@" ;}
  pkm-download() { aptitude download "$@" ;} # need a better 1; deb w/ depends
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  pkm-hold() { echo "$1 hold" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /hold/" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { aptitude show "$@" ;}
  pkm-install() { sudo aptitude install --without-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo aptitude purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo aptitude update ;}
  pkm-remove() { sudo aptitude remove "$@" ;}
  pkm-remove-orphans() { sudo aptitude autoclean ;}
  pkm-search() { aptitude search "$*" ;}
   ## fix  maybe with keyword $@ | sed / / ~d/
  pkm-search-description() { aptitude search ~d"$1"~d"$2"~d"$3"~d"$4"~d"$5"~d"$6"~d"$7" ;}
  pkm-unhold() { echo "$1 install" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /install/" ;}
  pkm-upgrade() { sudo aptitude update && sudo aptitude upgrade ;}
  ## PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
fi


#---------------------
#  Internet
#---------------------

## Youtube-dl (Stream|Download|RipAudio)
### DEMO: https://www.youtube.com/watch?v=MFxlwVhwayg
### DESC: download/stream media from many online sites

# Youtube-viewer
alias youtube-viewer='youtube-viewer -C -f -4 --results=6'  # color, fullscreen, 480p, number of results

# Youtube-dl
youtube-dl-stream() { youtube-dl -o - "$1" | $PLAYER - ;}

### DESC: convert youtube to audio (youtube.com only)
### -f 171 = webm audio (vorbis)
### -f 140 = m4a (aac)
yt2ogg() { youtube-dl -c --restrict-filenames -x --audio-format vorbis -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2wav() { youtube-dl -c --restrict-filenames -x --audio-format wav -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 140 "$@" ;}
yt2webmaudio() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2m4a() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 140 "$@" ;}

## Youtube-dl for Facebook
fb2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 140/m4a/webm/bestaudio "$@" ;}




## Peerflix v2 (Popcorntime CLI) [last updated July 27, 2016]
### DEMO: https://www.youtube.com/watch?v=NG13yOTPgfY
### LINK: https://github.com/saironiq/shellscripts
### DESC: popcorntime from terminal

peerflix-viewer() {
  # choose a player
  # PFLIX_VIDPLAYER=cvlc
  # PFLIX_VIDPLAYER=mplayer
  PFLIX_VIDPLAYER=mpv

  # ip address and port for video player to connect to
  PFLIX_IPADDR=localhost
  PFLIX_PORT=55055

  echo "${Yellow}>>>Check if peerflix stream is alive at $PFLIX_IPADDR:$PFLIX_PORT [hit Ctrl+C on this screen to exit properly] ${Color_Off}"
    until nc -vzw 2 "$PFLIX_IPADDR" "$PFLIX_PORT"; do sleep 2; done
  echo "${Green}>>>Connecting to peerflix stream ${Color_Off}"
    ($PFLIX_VIDPLAYER http://"$PFLIX_IPADDR":"$PFLIX_PORT")
  echo "${On_IRed}>>>Video Player has exited properly. Killing peerflix stream now ${Color_Off}"
    wait
    killall peerflix
}


## Skeet Skeet CLI

### requirements:
###     1. install nohup mpv vim youtube-dl
###     2. add this to your ~/.vimrc
###        map <F8> :exec '!nohup mpv ' . shellescape(getline('.'), 1) . ' >/dev/null 2>&1&'<CR><CR>
###
### how to use:
###     1. fap-xvideos ashlynn brooke
###     2. hit F8 on the link you want to play
###     3. hit ZZ or ZQ to quit vim


fap-youporn() {
  grepmatch=$(echo "$@" | sed 's/ /.*/g')
  keyword="$(echo "http://www.youporn.com/search?query=$@&type=straight" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/watch/ {print $2}' | cut -d\/ -f1-6 | grep -iE $grepmatch | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-youjizz() {
  keyword="$(echo "http://www.youjizz.com/search/$@" | sed 's/ /\-/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num".html""; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-pornotube() {
  keyword="$(echo "http://www.pornotube.com/search.php?q=$@" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do curl -s "$line" \
  | awk '/pornotube.com\/m/ && !/class/' | cut -d\" -f 2 | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-xvideos() {
  keyword="$(echo "http://www.xvideos.com/?k=$@" | sed 's/ /\+/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&p=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/xvideos\.com\/video/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-jizzhut() {
  keyword="$(echo "http://www.jizzhut.com/search/$@" | sed 's/ /\-/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num.html"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/jizzhut\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | awk '!x[$0]++' | vim -R -
}

fap-redtube() {
  keyword="$(echo "http://www.redtube.com/?search=$@" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -source "$line" \
  | awk -F\" '/class="s"/ {print $4, "http://redtube.com"$2}' | awk '!x[$0]++' ; done)

  echo $videourl | awk '!x[$0]++' | vim -R -
}

fap-spankwire() {
  keyword="$(echo "http://www.spankwire.com/search/straight/keyword/$@" | sed 's/ /\%20/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword?Sort=Relevance&Page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/www\.spankwire\.com/ && /video/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}

# quvi not supported anymore
fap-tnaflix() {
  keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
  	"http://www.tnaflix.com/search.php?page=$num$keyword"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/video[0-9]/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}
fap-empflix() {
  keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
  	"http://www.empflix.com/search.php?page=$num$keyword"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/empflix\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}


## MPSYT-Youtube Channels

# tutorial video: https://www.youtube.com/watch?v=VE2iCBkIs8E
mpsyt-top100songs() { mpsyt pl PLx0sYbCqOb8TBPRdmBHs5Iftvv9TPboYG ;}
mpsyt-movie-flicksandthecity() { mpsyt user UCS5C4dC1Vc3EzgeDO-Wu3Mg ;}



## Youtube-Viewer Channels

# tutorial video: http://www.youtube.com/watch?v=FnJ67oAxVQ4
# watch/login/comment/search/download...etc video on youtube, all from cli
# https://github.com/trizen/youtube-viewer
yt-listen() { youtube-viewer -n $@ ;}	# no video, music/audio only
yt-music() { youtube-viewer -n --category=Music --top ;}	# show top music list
yts-movie-movieclipstrailer() { youtube-viewer -u UCi8e0iOVk1fEOogdfu4YgfA ;}
yts-afterbuzz-arrowaftershow() { youtube-viewer -p PL6THzna6gLceNeZoXKUOoDeO7cwI57rJn ;}


#---------------------
#  Misc
#---------------------

## Fasd (Jump and Open Files Quickly)
### DEMO: http://www.youtube.com/watch?v=ur81Y-mV5Us
### LINK: https://github.com/clvv/fasd
### DESC: jump to path or open recent files quickly from cli

if which fasd >/dev/null; then
  eval "$(fasd --init auto)"	# get fasd working, initialization code

  # different fasd listing
  # alias a='fasd -a'               # any
  # alias s='fasd -si'              # show / search / select
  # alias d='fasd -d'               # directory
  # alias f='fasd -f'               # file
  # alias sd='fasd -sid'            # interactive directory selection
  # alias sf='fasd -sif'            # interactive file selection
  # alias z='fasd_cd -d'            # cd, same functionality as j in autojump
  # alias zz='fasd_cd -d -i'        # cd with interactive selection

  # open with external programs
  alias m="f -e $PLAYER"		# open with video player
  alias o="a -e $OPENER"		# open any file
  alias v="f -e $EDITOR"		# open with text editor
fi

#---------------------
#  Storage
#---------------------


## Fuzzy Finder {
### DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
### DESC: interactive fuzzy string matching
### LINK: https://github.com/junegunn/fzf

rofi-fzf() { $(declare -f | awk '/fzf-/ {print $1}' | grep -i fzf | fzf -e -i) ;}

# fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i | awk '{$1=$1};1')" | xclip -selection clipboard ;}
fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard ;}
fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e -i )' ;}
fzf-bookmarkscli() { sr "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-bookmarks() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-bookmarks2clipboard() { echo -n "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" | awk '{print $2}' | xclip -selection clipboard ;}
fzf-bookmarkstor() { surfraw -browser=tor-browser-en "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-tor() { torify w3m "$(cat ~/.config/surfraw/bookmarks | awk 'NF != 0 && !/^#/ && /\.onion/' |fzf -e -i | awk '{print $2}')" ;}


fzf-launcher() {
  # note: xdg-open has a bug with .desktop files, so we cant use that shit
  selected="$(ls /usr/share/applications | fzf -e -i )"
  nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
  # disown if exit 0 successfully
  if [[ $? = 0 ]] ; then disown; fi
}

# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
# https://github.com/junegunn/fzf/wiki/examples#browsing-history
fzf-chromium_history() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  # macos
  # cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
  # linux
  \cp -f ~/.config/chromium/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
  # fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}


fzf-locate() {
  # xdg-open "$(locate "*" | fzf -e -i )"
  # xdg-open "$(locate home media | fzf -e -i )" >/dev/null 2>&1 & disown
  xdg-open "$(locate \
    -d /var/lib/mlocate/mlocate.db \
    -d ~/.updatedb/bingbong.db \
    -d ~/.updatedb/kamui.db \
    -d ~/.updatedb/wiiiso.db \
    home media \
    | fzf -e -i )" >/dev/null 2>&1 & disown


  # some programs require a longer time to load
  # sleep 1.5

  # if cancle or fail then exit
  # if [ $? -ne 0 ]
  # then
  #  	exit
  # fi
}


# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# edit single line snippet
cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
fzf-snippet() {
  selected="$(cat ~/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
  # remove tags, leading and trailing spaces, also no newline
  echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
}

fzf-multisnippet() {
  # location of snippets
  dir=~/.multisnippet

  # merge filename and tags into single line
  results=$(for FILE in $dir/*
  do
    getname=$(basename $FILE)
    gettags=$(head -n 1 $FILE)
    echo -e "$getname \t $gettags"
  done)

  # copy content into clipboard without tags
  filename=$(echo "$(echo "$results" | fzf -e -i )" | cut -d' ' -f 1)
  sed 1d $dir/$filename | xclip -selection clipboard
}


#---------------------
#  Functions 2
#---------------------


## show file access permission
### http://unix.stackexchange.com/a/46921
file-permission() { stat --format '%a %n' "$@" ;}

## display mime of file application/zip, application/x-tar
file-type() { file --mime-type -b "$@" ;}

## call vim help page from shell prompt
function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

## searches for manual locally or online
manned() {
  for arg in "$@"; do man $arg 2> /dev/null \
  || $arg -H 2> /dev/null || $arg -h 2> /dev/null \
  || $arg --help-all 2> /dev/null || $arg --help 2> /dev/null \
  || help $arg 2> /dev/null \
  || $BROWSERCLI "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || $BROWSER "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || open "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || xdg-open "http://manned.org/browse/search?q=$@"
  done
}

## search commandlinefu.com
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
	| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

## display one random command from commandlinefu.com
cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}


#---------------------
#  Testing
#---------------------

## Rsync

### Copy
cpr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync copying files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress "$@" ;;
		esac
	fi
}
### Move
mvr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync moving files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a --remove-source-files "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress --remove-source-files "$@" ;;
		esac
	fi
}



## Libre Office
convert_to_html() { soffice --headless --convert-to "html:XHTML Writer File:UTF8" "$1" ;}
convert_to_txt() { soffice --headless --convert-to "txt:Text (encoded):UTF8" "$1" ;}


#------------------------
#  Function Informations
#------------------------

function    osr              { shutdown -r now; }
function    osh              { shutdown -h now; }

# function    mfloppy          { mount /dev/fd0 /mnt/floppy; }
# function    umfloppy         { umount /mnt/floppy; }

# function    mdvd             { mount -t iso9660 -o ro /dev/dvd /mnt/dvd; }
# function    umdvd            { umount /mnt/dvd; }

# function    mcdrom           { mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom; }
# function    umcdrom          { umount /mnt/cdrom; }


# function    dub              { du -sclb $@; }
# function    duk              { du -sclk $@; }
# function    dum              { du -sclm $@; }

# function    dfk              { df -PTak $@; }
# function    dfm              { df -PTam $@; }
# function    dfh              { df -PTah $@; }
# function    dfi              { df -PTai $@; }



## Folder Jumplist

### go, gs
gh() { cd ~ && lst ;}
g/() { cd / && lst ;}
# gm() { cd /media && lst ;}
gM() { cd ~/Music && lst ;}
gD() { cd ~/Documents && lst ;}
# gd() { cd ~/Downloads && lst ;}
# gp() { cd ~/Pictures && lst ;}
# gP() { cd ~/Public && lst ;}
# gw() { cd ~/Pictures/Wallpapers && lst ;}
# gS() { cd ~/.scripts && lst ;}




